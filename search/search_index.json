{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO MQTT The siddhi-io-mqtt is an extension to Siddhi mqtt source and sink implementation,that publish and receive events from mqtt broker. For information on Siddhi and it's features refer Siddhi Documentation . Downloads Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here . Latest API Docs Latest API Docs is 3.0.2 . Features mqtt ( Sink ) The MQTT sink publishes the events to an MQTT broker mqtt ( Source ) The MQTT source receives the events from an MQTT broker Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-mqtt","text":"The siddhi-io-mqtt is an extension to Siddhi mqtt source and sink implementation,that publish and receive events from mqtt broker. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO MQTT"},{"location":"#downloads","text":"Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here .","title":"Downloads"},{"location":"#latest-api-docs","text":"Latest API Docs is 3.0.2 .","title":"Latest API Docs"},{"location":"#features","text":"mqtt ( Sink ) The MQTT sink publishes the events to an MQTT broker mqtt ( Source ) The MQTT source receives the events from an MQTT broker","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2017 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#sink","text":"","title":"Sink"},{"location":"api/1.0.10/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#sink","text":"","title":"Sink"},{"location":"api/1.0.11/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.11/#source","text":"","title":"Source"},{"location":"api/1.0.11/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#sink","text":"","title":"Sink"},{"location":"api/1.0.12/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.12/#source","text":"","title":"Source"},{"location":"api/1.0.12/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#sink","text":"","title":"Sink"},{"location":"api/1.0.13/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.13/#source","text":"","title":"Source"},{"location":"api/1.0.13/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#sink","text":"","title":"Sink"},{"location":"api/1.0.14/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.14/#source","text":"","title":"Source"},{"location":"api/1.0.14/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.15/","text":"API Docs - v1.0.15 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.15"},{"location":"api/1.0.15/#api-docs-v1015","text":"","title":"API Docs - v1.0.15"},{"location":"api/1.0.15/#sink","text":"","title":"Sink"},{"location":"api/1.0.15/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.15/#source","text":"","title":"Source"},{"location":"api/1.0.15/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.16/","text":"API Docs - v1.0.16 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.16"},{"location":"api/1.0.16/#api-docs-v1016","text":"","title":"API Docs - v1.0.16"},{"location":"api/1.0.16/#sink","text":"","title":"Sink"},{"location":"api/1.0.16/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.16/#source","text":"","title":"Source"},{"location":"api/1.0.16/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.17/","text":"API Docs - v1.0.17 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.17"},{"location":"api/1.0.17/#api-docs-v1017","text":"","title":"API Docs - v1.0.17"},{"location":"api/1.0.17/#sink","text":"","title":"Sink"},{"location":"api/1.0.17/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.17/#source","text":"","title":"Source"},{"location":"api/1.0.17/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.18/","text":"API Docs - v1.0.18 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.18"},{"location":"api/1.0.18/#api-docs-v1018","text":"","title":"API Docs - v1.0.18"},{"location":"api/1.0.18/#sink","text":"","title":"Sink"},{"location":"api/1.0.18/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.18/#source","text":"","title":"Source"},{"location":"api/1.0.18/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.19/","text":"API Docs - v1.0.19 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.19"},{"location":"api/1.0.19/#api-docs-v1019","text":"","title":"API Docs - v1.0.19"},{"location":"api/1.0.19/#sink","text":"","title":"Sink"},{"location":"api/1.0.19/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.19/#source","text":"","title":"Source"},{"location":"api/1.0.19/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.20/","text":"API Docs - v1.0.20 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.20"},{"location":"api/1.0.20/#api-docs-v1020","text":"","title":"API Docs - v1.0.20"},{"location":"api/1.0.20/#sink","text":"","title":"Sink"},{"location":"api/1.0.20/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.20/#source","text":"","title":"Source"},{"location":"api/1.0.20/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.21/","text":"API Docs - v1.0.21 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.21"},{"location":"api/1.0.21/#api-docs-v1021","text":"","title":"API Docs - v1.0.21"},{"location":"api/1.0.21/#sink","text":"","title":"Sink"},{"location":"api/1.0.21/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.21/#source","text":"","title":"Source"},{"location":"api/1.0.21/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.22/","text":"API Docs - v1.0.22 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.22"},{"location":"api/1.0.22/#api-docs-v1022","text":"","title":"API Docs - v1.0.22"},{"location":"api/1.0.22/#sink","text":"","title":"Sink"},{"location":"api/1.0.22/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.22/#source","text":"","title":"Source"},{"location":"api/1.0.22/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.23/","text":"API Docs - v1.0.23 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.0.23"},{"location":"api/1.0.23/#api-docs-v1023","text":"","title":"API Docs - v1.0.23"},{"location":"api/1.0.23/#sink","text":"","title":"Sink"},{"location":"api/1.0.23/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.0.23/#source","text":"","title":"Source"},{"location":"api/1.0.23/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream. Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#source","text":"","title":"Source"},{"location":"api/1.0.9/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.0.9/#sink","text":"","title":"Sink"},{"location":"api/1.0.9/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#sink","text":"","title":"Sink"},{"location":"api/1.1.1/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/1.1.1/#source","text":"","title":"Source"},{"location":"api/1.1.1/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/3.0.0/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"3.0.0"},{"location":"api/3.0.0/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/3.0.0/#sink","text":"","title":"Sink"},{"location":"api/3.0.0/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/3.0.0/#source","text":"","title":"Source"},{"location":"api/3.0.0/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/3.0.1/","text":"API Docs - v3.0.1 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"3.0.1"},{"location":"api/3.0.1/#api-docs-v301","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.1"},{"location":"api/3.0.1/#sink","text":"","title":"Sink"},{"location":"api/3.0.1/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/3.0.1/#source","text":"","title":"Source"},{"location":"api/3.0.1/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/3.0.2/","text":"API Docs - v3.0.2 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"3.0.2"},{"location":"api/3.0.2/#api-docs-v302","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.2"},{"location":"api/3.0.2/#sink","text":"","title":"Sink"},{"location":"api/3.0.2/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/3.0.2/#source","text":"","title":"Source"},{"location":"api/3.0.2/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"},{"location":"api/latest/","text":"API Docs - v3.0.2 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink mqtt (Sink) The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883. Source mqtt (Source) The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"latest"},{"location":"api/latest/#api-docs-v302","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.2"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#mqtt-sink","text":"The MQTT sink publishes the events to an MQTT broker Syntax @sink(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , message.retain= STRING , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. generated by the system STRING Yes No topic The topic to which the events processed by WSO2 SP are published via MQTT. This is a mandatory parameter. STRING No Yes quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored. Events may get lost if the MQTT client is disconnected or if the server fails. This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes Yes clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No message.retain If this parameter is set to true, the last message sent from the topic to which WSO2 SP publishes events is retained until the next message is sent. false STRING Yes Yes keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @sink(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true', message.retain='false', quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query publishes events to a stream named BarStream via the MQTT transport. The events are published to a topic named mqtt_topic located at tcp://localhost:1883.","title":"mqtt (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#mqtt-source","text":"The MQTT source receives the events from an MQTT broker Syntax @source(type= mqtt , url= STRING , username= STRING , password= STRING , client.id= STRING , topic= STRING , quality.of.service= STRING , clean.session= BOOL , keep.alive= INT , connection.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The URL of the MQTT broker. It is used to connect to the MQTT broker. It is required to specify a valid URL here. STRING No No username The username to be provided when the MQTT client is authenticated by the broker. null STRING Yes No password The password to be provided when the MQTT client is authenticated by the broker. empty STRING Yes No client.id A unique ID for the MQTT client. The server uses this to identify the client when it reconnects. If you do not specify a client ID, the system automatically generates it. STRING No No topic The topic from which WSO2 SP receives events via MQTT. Multiple topics can be specified as a list of comma separated values.This is a mandatory parameter. STRING No No quality.of.service The quality of service provided by the MQTT client. The possible values are as follows. 0 : The MQTT client sends each event to WSO2 SP only once. It does not receive an acknowledgement when an event is delivered, and the events are not stored.Events may get lost if the MQTT client is disconnected or if the server fails.This is the fastest method in which events are received via MQTT. 1 : The MQTT client sends each event to WSO2 SP at least once. If the MQTT client does not receive an acknowledgement to indicate that the event is delivered, it sends the event again. 2 : The MQTT client sends each event to WSO2 SP only once. The events are stored until the WSO2 SP receives them. This is the safest, but the slowest method of receiving events via MQTT. 1 STRING Yes No clean.session This is an optional paramater. If this parameter is set to true , the subscriptions made by the MQTT client during a session expire when the session ends,and they need to be recreated for the next session. If this parameter is set to false , all the information relating to the MQTT client's connection to the broker (e.g., the specific topics to which the client has subscribed) are saved after a session. Thus, when a session ends and restarts, the connection is re-established with the same information. The default value is true . true BOOL Yes No keep.alive The maximum number of seconds the connection between the MQTT client and the broker should be maintained without any events being transferred. Once this time interval elapses without any event transfers, the connection is dropped. The default value is 60. 60 INT Yes No connection.timeout The maximum number of seconds that the MQTT client should spend attempting to connect to the MQTT broker. Once this time interval elapses, a timeout takes place. 30 INT Yes No Examples EXAMPLE 1 @source(type='mqtt', url= 'tcp://localhost:1883', topic='mqtt_topic', clean.session='true',quality.of.service= '1', keep.alive= '60',connection.timeout='30'@map(type='xml'))Define stream BarStream (symbol string, price float, volume long); This query receives events from the mqtt_topic topic via MQTT,and processes them to the BarStream stream.","title":"mqtt (Source)"}]}